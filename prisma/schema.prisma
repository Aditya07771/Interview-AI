// // prisma/schema.prisma
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String?
  imageUrl  String? @map("image_url")
  createdAt String? // optional because drizzle didn’t force notNull

  interviewSessions InterviewSession[] //One user can have many interview sessions
}

model MockInterview {
  id            Int     @id @default(autoincrement())
  jsonMockResp  String
  jobPosition   String
  jobDesc       String
  jobExperience String
  createdBy     String
  createdAt     String? // optional because drizzle didn’t force notNull
  mockId        String  @unique

  userAnswers UserAnswer[] @relation("MockToAnswer")
}

model UserAnswer {
  id         Int     @id @default(autoincrement())
  mockIdRef  String
  question   String
  correctAns String?
  userAns    String?
  feedback   String?
  rating     String?
  userEmail  String?
  createdAt  String?

  mock MockInterview @relation("MockToAnswer", fields: [mockIdRef], references: [mockId])
}

model InterviewSession {
  id                 Int      @id @default(autoincrement())
  interviewQuestions String[] // stores array of questions
  resumeUrl          String
  userId             Int
  status             String
  createdAt          DateTime @default(now())

  // Relation to User (assuming each session belongs to a user)
  user User @relation(fields: [userId], references: [id])
}
